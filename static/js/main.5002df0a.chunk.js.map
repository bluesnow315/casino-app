{"version":3,"sources":["assets/figure.png","assets/logo.svg","assets/icon.svg","components/form/textInput.js","_services/request.js","components/list/getCryptoPrice.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","card","minWidth","padding","display","flexDirection","textAlign","textField","marginLeft","spacing","marginRight","typographyText","marginTop","margin","marginBottom","AddButton","withStyles","root","color","palette","getContrastText","deepOrange","backgroundColor","Fab","TextInputFormComponent","props","classes","Card","className","TextField","id","label","variant","onChange","handleTextFieldChange","onClick","handleAddButtonClick","Typography","gutterBottom","style","getCryptoPriceList","requests","axios","get","then","response","localStorage","setItem","JSON","stringify","data","GetCryptoPriceList","displaySnackBarMessage","index","SnackbarContent","message","state","priceList","prevProps","this","priceListRequest","setState","parse","getItem","cryptoPriceList","Object","keys","map","eachPriceListItem","EUR","key","src","Icon","alt","IconButton","evt","handleDeleteButtonClick","Component","App","input","handleChange","e","target","value","onAddButtonClick","previousState","preventDefault","onDeleteButtonClick","item","filter","request","Logo","width","Figure","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5002df0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/figure.50a6406b.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.746cc023.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon.c9c968d6.svg\";","import React from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    minWidth: 275,\r\n    padding: 30,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    textAlign: 'center'\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  typographyText: {\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    marginBottom: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst AddButton = withStyles(theme => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    '&:hover': {\r\n      backgroundColor: deepOrange[700]\r\n    }\r\n  }\r\n}))(Fab);\r\n\r\nexport default function TextInputFormComponent(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <TextField\r\n        id=\"outlined-helperText\"\r\n        label=\"CRYPTOCURRENCY CODE\"\r\n        className={classes.textField}\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        onChange={props.handleTextFieldChange}\r\n      />\r\n      <AddButton\r\n        variant=\"extended\"\r\n        color=\"primary\"\r\n        className={classes.margin}\r\n        onClick={props.handleAddButtonClick}\r\n      >\r\n        Add\r\n      </AddButton>\r\n      <Typography\r\n        variant=\"caption\"\r\n        display=\"block\"\r\n        color=\"inherit\"\r\n        gutterBottom\r\n        style={{ color: '#bdb0b0' }}\r\n      >\r\n        Use of this service is subject to terms and\r\n        <br />\r\n        {'conditions'}\r\n      </Typography>\r\n    </Card>\r\n  );\r\n}\r\n","import axios from 'axios';\r\n\r\nfunction getCryptoPriceList(requests) {\r\n  return axios\r\n    .get(\r\n      `https://min-api.cryptocompare.com/data/pricemulti?fsyms=${requests}&tsyms=EUR`\r\n    )\r\n    .then(response => {\r\n      localStorage.setItem(\"priceList\", JSON.stringify(response.data))\r\n      return response.data;\r\n    });\r\n}\r\n\r\nexport default getCryptoPriceList;\r\n","import React, { Component } from 'react';\r\nimport Icon from '../../assets/icon.svg';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport getCryptoPriceList from '../../_services/request';\r\nimport './getCryptoPrice.scss';\r\nclass GetCryptoPriceList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { priceList: [] };\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.priceListRequest !== prevProps.priceListRequest) {\r\n      getCryptoPriceList(this.props.priceListRequest)\r\n        .then(response => {\r\n          this.setState({ priceList: JSON.parse(localStorage.getItem('priceList')) });\r\n        })\r\n    }\r\n  }\r\ncomponentDidMount(){\r\n  this.setState({ priceList: JSON.parse(localStorage.getItem('priceList')) });\r\n}\r\n  displaySnackBarMessage = index => {\r\n    if (index === 0) {\r\n      return (\r\n        <SnackbarContent\r\n          message=\"Oops! No data available try again or use uppercase letters like (e.g. BTC, NMC).\"\r\n          style={{ backgroundColor: '#4e2872' }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  render() {\r\n    const cryptoPriceList = this.state.priceList\r\n      ? Object.keys(this.state.priceList).map((eachPriceListItem, index) =>\r\n          this.state.priceList[eachPriceListItem].EUR ? (\r\n            <div key={index}>\r\n              <div className=\"crypto-priceList-container-item\">\r\n                <img src={Icon} alt=\"icon\" />\r\n                <div className=\"crypto-priceList-container-item-col\">\r\n                  <Typography variant=\"subtitle2\" gutterBottom>\r\n                    {eachPriceListItem}\r\n                  </Typography>\r\n                  <p className=\"App-content-sub-details\">\r\n                    {this.state.priceList[eachPriceListItem].EUR} â‚¬\r\n                  </p>\r\n                </div>\r\n                <IconButton\r\n                  onClick={evt => {\r\n                    this.props.handleDeleteButtonClick(eachPriceListItem, evt);\r\n                  }}\r\n                >\r\n                  <CloseIcon className=\"crypto-priceList-container-item-close\" />\r\n                </IconButton>\r\n              </div>\r\n              <hr />\r\n            </div>\r\n          ) : (\r\n            <div key={index}>{this.displaySnackBarMessage(index)}</div>\r\n          )\r\n        )\r\n      : null;\r\n    return <div className=\"crypto-priceList-container\">{cryptoPriceList}</div>;\r\n  }\r\n}\r\n\r\nexport default GetCryptoPriceList;\r\n","import React, { Component } from 'react';\nimport TextInputFormComponent from './components/form/textInput';\nimport Figure from './assets/figure.png';\nimport Logo from './assets/logo.svg';\nimport Typography from '@material-ui/core/Typography';\nimport './App.scss';\nimport GetCryptoPriceList from './components/list/getCryptoPrice';\n\nclass App extends Component {\n  state = {\n    input: '',\n    priceListRequest: []\n  };\n  handleChange = e => {\n    this.setState({ input: e.target.value });\n  };\n  onAddButtonClick = e => {\n    this.setState(previousState => ({\n      priceListRequest: [...previousState.priceListRequest, this.state.input]\n    }));\n    e.preventDefault();\n  };\n  onDeleteButtonClick = (item, e) => {\n    this.setState({\n      priceListRequest: this.state.priceListRequest.filter(\n        request => item !== request\n      )\n    });\n    e.preventDefault();\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-content\">\n          <div className=\"App-content-info\">\n            <img src={Logo} alt=\"logo\" />\n            <div>\n              <Typography\n                variant=\"h4\"\n                gutterBottom\n                style={{ width: '100%', marginTop: '15%' }}\n              >\n                Now you can track all your cryptos here!\n              </Typography>\n              <p className=\"App-content-info-paragraph\">\n                Just enter the cryptocurrency code on the form to the right\n              </p>\n              <p className=\"App-content-info-mobile\">\n                Just enter the cryptocurrency code on the form below\n              </p>\n            </div>\n            <GetCryptoPriceList\n              priceListRequest={this.state.priceListRequest}\n              handleDeleteButtonClick={this.onDeleteButtonClick}\n            />\n          </div>\n          <div className=\"App-content-center\">\n            <img src={Figure} alt=\"clown figure\" />\n          </div>\n          <div className=\"App-content-form\">\n            <TextInputFormComponent\n              handleAddButtonClick={this.onAddButtonClick}\n              handleTextFieldChange={this.handleChange}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}